{"version":3,"sources":["scripts/main.js"],"names":["page","document","querySelector","buttonStart","messageStart","messageWin","messageEndGame","gameScore","cells","querySelectorAll","rows","columnOne","columnTwo","columnTree","columnFour","columns","renameStartButton","classList","add","innerHTML","remove","mooveLeft","wereMooved","row","previousMerged","i","children","length","condition","cell","previousCell","previousElementSibling","getCurrentClass","mooveRight","nextCell","nextElementSibling","mooveUp","column","undefined","mooveDown","getStarted","columnIndex","className","currentClass","split","position","lastIndexOf","index","slice","join","score","addRandomToEmpty","emptyCell","push","isThereMoove","Math","floor","random","twoOrfour","max","isThereEmptyCells","mooves","lastCellInRowArray","includes","addEventListener","e","target","contains","style","visibility","key"],"mappings":"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","file":"main.feeccae5.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst page = document.querySelector('.page');\nconst buttonStart = document.querySelector('.start');\nconst messageStart = document.querySelector('.message-start');\nconst messageWin = document.querySelector('.message-win');\nconst messageEndGame = document.querySelector('.message-lose');\nconst gameScore = document.querySelector('.game-score');\n\nconst cells = document.querySelectorAll('.field-cell');\nconst rows = document.querySelectorAll('.field-row');\nconst columnOne = document.querySelectorAll('.column-1');\nconst columnTwo = document.querySelectorAll('.column-2');\nconst columnTree = document.querySelectorAll('.column-3');\nconst columnFour = document.querySelectorAll('.column-4');\nconst columns = [columnOne, columnTwo, columnTree, columnFour];\n\npage.addEventListener('click', (e) => {\n  const target = e.target;\n\n  if (target.classList.contains('start')) {\n    messageStart.style.visibility = 'hidden';\n    getStarted();\n    addRandomToEmpty(true);\n    addRandomToEmpty(true);\n  }\n\n  if (target.classList.contains('restart')) {\n    gameScore.innerHTML = 0;\n    getStarted();\n    addRandomToEmpty(true);\n    addRandomToEmpty(true);\n    messageEndGame.classList.add('hidden');\n  }\n});\n\ndocument.addEventListener('keydown', (e) => {\n  switch (e.key) {\n    case 'ArrowRight':\n      renameStartButton();\n      addRandomToEmpty(mooveRight());\n      break;\n\n    case 'ArrowLeft':\n      renameStartButton();\n      addRandomToEmpty(mooveLeft());\n      break;\n\n    case 'ArrowUp':\n      renameStartButton();\n      addRandomToEmpty(mooveUp());\n      break;\n\n    case 'ArrowDown':\n      renameStartButton();\n      addRandomToEmpty(mooveDown());\n      break;\n  }\n\n  // isThereMoove();\n});\n\nfunction renameStartButton() {\n  buttonStart.classList.add('restart');\n  buttonStart.innerHTML = 'Restart';\n  buttonStart.classList.remove('start');\n}\n\nfunction mooveLeft() {\n  let wereMooved = false;\n\n  for (const row of rows) {\n    let previousMerged;\n\n    for (let i = 1; i < row.children.length; i++) {\n      let condition = true;\n      let cell = row.children[i];\n      let previousCell = cell.previousElementSibling;\n\n      cell.classList.remove('animate');\n      previousCell.classList.remove('animate');\n\n      if (cell.classList.length < 4) {\n        continue;\n      }\n\n      while (condition) {\n        switch (true) {\n          case previousCell === null:\n            condition = false;\n            break;\n\n          case previousCell.classList[3] === cell.classList[3]\n          && previousMerged !== previousCell:\n            previousCell.classList.add(getCurrentClass(cell));\n            previousCell.classList.remove(cell.classList[3]);\n            cell.classList.remove(cell.classList[3]);\n            previousMerged = previousCell;\n            wereMooved = true;\n            break;\n\n          case previousCell.classList.length > 3:\n            condition = false;\n            break;\n\n          default:\n            previousCell.classList.add(cell.classList[3]);\n            cell.classList.remove(cell.classList[3]);\n            cell = previousCell;\n            previousCell = cell.previousElementSibling;\n            wereMooved = true;\n            break;\n        }\n      }\n    }\n  }\n\n  return wereMooved;\n}\n\nfunction mooveRight() {\n  let wereMooved = false;\n\n  for (const row of rows) {\n    let previousMerged;\n\n    for (let i = row.children.length - 2; i >= 0; i--) {\n      let condition = true;\n      let cell = row.children[i];\n      let nextCell = cell.nextElementSibling;\n\n      cell.classList.remove('animate');\n      nextCell.classList.remove('animate');\n\n      if (cell.classList.length < 4) {\n        continue;\n      }\n\n      while (condition) {\n        switch (true) {\n          case nextCell === null:\n            condition = false;\n            break;\n\n          case nextCell.classList[3] === cell.classList[3]\n            && previousMerged !== nextCell:\n            nextCell.classList.add(getCurrentClass(cell));\n            nextCell.classList.remove(cell.classList[3]);\n            cell.classList.remove(cell.classList[3]);\n            previousMerged = nextCell;\n            wereMooved = true;\n            break;\n\n          case nextCell.classList.length > 3:\n            condition = false;\n            break;\n\n          default:\n            nextCell.classList.add(cell.classList[3]);\n            cell.classList.remove(cell.classList[3]);\n            cell = nextCell;\n            nextCell = cell.nextElementSibling;\n            wereMooved = true;\n            break;\n        }\n      }\n    }\n  }\n\n  return wereMooved;\n}\n\nfunction mooveUp() {\n  let wereMooved = false;\n\n  for (const column of columns) {\n    let previousMerged;\n\n    for (let i = 1; i < column.length; i++) {\n      let condition = true;\n      const cell = column[i];\n\n      cell.classList.remove('animate');\n      column[i - 1].classList.remove('animate');\n\n      if (cell.classList.length < 4) {\n        continue;\n      }\n\n      while (condition) {\n        switch (true) {\n          case column[i - 1] === undefined:\n            condition = false;\n            break;\n\n          case column[i - 1].classList[3] === column[i].classList[3]\n            && previousMerged !== column[i - 1]:\n            column[i - 1].classList.add(getCurrentClass(column[i]));\n            column[i - 1].classList.remove(column[i].classList[3]);\n            column[i].classList.remove(column[i].classList[3]);\n            condition = false;\n            previousMerged = column[i - 1];\n            wereMooved = true;\n            break;\n\n          case column[i - 1].classList.length > 3:\n            condition = false;\n            break;\n\n          default:\n            column[i - 1].classList.add(column[i].classList[3]);\n            column[i].classList.remove(column[i].classList[3]);\n            i--;\n            wereMooved = true;\n            break;\n        }\n      }\n    }\n  }\n\n  return wereMooved;\n}\n\nfunction mooveDown() {\n  let wereMooved = false;\n  let previousMerged;\n\n  for (const column of columns) {\n    for (let i = column.length - 2; i >= 0; i--) {\n      let condition = true;\n      const cell = column[i];\n\n      cell.classList.remove('animate');\n      column[i + 1].classList.remove('animate');\n\n      if (cell.classList.length < 4) {\n        continue;\n      }\n\n      while (condition) {\n        switch (true) {\n          case column[i + 1] === undefined:\n            condition = false;\n            break;\n\n          case column[i + 1].classList[3] === column[i].classList[3]\n            && previousMerged !== column[i + 1]:\n            column[i + 1].classList.add(getCurrentClass(column[i]));\n            column[i + 1].classList.remove(column[i].classList[3]);\n            column[i].classList.remove(column[i].classList[3]);\n            condition = false;\n            // i = column.length;\n            previousMerged = column[i + 1];\n            wereMooved = true;\n            break;\n\n          case column[i + 1].classList.length > 3:\n            condition = false;\n            // i = -1;\n            break;\n\n          default:\n            column[i + 1].classList.add(column[i].classList[3]);\n            column[i].classList.remove(column[i].classList[3]);\n            i++;\n            wereMooved = true;\n            break;\n        }\n      }\n    }\n  }\n\n  return wereMooved;\n}\n\nfunction getStarted() {\n  let columnIndex = 1;\n\n  for (let i = 0; i < cells.length; i++) {\n    cells[i].className = 'field-cell column';\n\n    if (columnIndex <= 4) {\n      cells[i].classList.add(`column-${columnIndex}`);\n      columnIndex++;\n    }\n\n    if (columnIndex >= 5) {\n      columnIndex = 1;\n    }\n  }\n}\n\nfunction getCurrentClass(cell) {\n  const currentClass = cell.classList[cell.classList.length - 1].split('');\n  const position = currentClass.lastIndexOf('-');\n  const index = currentClass.slice(position + 1, currentClass.length).join('');\n\n  let score = +gameScore.innerHTML;\n\n  score += +index * 2;\n\n  if (index * 2 === 2048) {\n    messageWin.classList.remove('hidden');\n  }\n\n  gameScore.innerHTML = score;\n\n  return 'field-cell--' + index * 2;\n}\n\nfunction addRandomToEmpty(wereMooved) {\n  const emptyCell = [];\n\n  for (let i = 0; i < cells.length; i++) {\n    if (cells[i].classList.length < 4) {\n      emptyCell.push(cells[i]);\n    }\n  }\n\n  isThereMoove(emptyCell.length);\n\n  if (!wereMooved) {\n    return;\n  }\n\n  const index = Math.floor(Math.random() * (emptyCell.length));\n  const min = 1;\n  const max = 100;\n  const number = Math.floor(min + Math.random() * (max + 1 - min));\n\n  const twoOrfour = number >= 91 ? 'field-cell--4' : 'field-cell--2';\n\n  emptyCell[index].classList.add(twoOrfour);\n  emptyCell[index].classList.add('animate');\n}\n\nfunction isThereMoove(isThereEmptyCells) {\n  let mooves = 0;\n  const lastCellInRowArray = [3, 7, 11];\n\n  for (let i = 0; i < cells.length; i++) {\n    const nextCell = cells[i + 1] ? cells[i + 1] : cells[cells.length - 2];\n\n    if (mooves === 0\n        & !lastCellInRowArray.includes(i)\n        & cells[i].classList[3] === nextCell.classList[3]) {\n      mooves++;\n      break;\n    }\n\n    if (mooves === 0\n        & i < 12\n        && cells[i].classList[3] === cells[i + 4].classList[3]) {\n      mooves++;\n      break;\n    }\n  }\n\n  if (!mooves & !isThereEmptyCells) {\n    messageEndGame.classList.remove('hidden');\n  }\n}\n"]}